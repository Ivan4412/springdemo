package cn.utrust.fintech.cdcp2.core.provider.tonghuashun.impl;

import cn.utrust.fintech.cdcp2.core.dto.tonghuashun.req.${className}Dto;
import cn.utrust.fintech.cdcp2.core.provider.tonghuashun.TongHuaShunRealTimeQuotationDataProvider;
import cn.utrust.fintech.cdcp2.dto.tonghuashun.req.BaseTongHuaShunReq;
import cn.utrust.fintech.cdcp2.dto.tonghuashun.resp.${className}Resp;
import cn.utrust.fintech.cdcp2.framework.json.JSON;
import cn.utrust.fintech.cdcp2.framework.json.JSONObject;
import cn.utrust.fintech.cdcp2.framework.util.StringUtils;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

/**
 * ${classNickName}
 *
 * ${author}
 * ${date}
 */
@ApiOperation("${classNickName}")
@Component("/openapi/tonghuashun/${classPath}")
@Slf4j
public class ${className}DataProvider extends TongHuaShunRealTimeQuotationDataProvider<BaseTongHuaShunReq, List<${className}Resp>, JSONObject> {

    @Override
    public String providerCode() {
        return "${className}";
    }

    @Override
    protected List<${className}Resp> doProvide(JSONObject externalData, Exception e) {
        Object data = effectiveExternalData(externalData);
        if (data != null) {
            String result = JSON.toJSONString(data);
            if (StringUtils.isNotBlank(result)) {
                List<${className}Resp> resp = JSON.parseArray(result, ${className}Resp.class);
                return resp;
            }
        }
        return null;
    }

    @SuppressWarnings("serial")
    @Override
    protected JSONObject doExternalData(BaseTongHuaShunReq param) {
        TongHuaShunAccount account = getExternalAccountSetting(param, TongHuaShunAccount.class);
        //初始化请求参数
        ${className}Dto dataReq = ${className}Dto.getInstance(param);
        //发送请求
        return this.send(account, dataReq);
    }
}
